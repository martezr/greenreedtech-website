<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Terraform on Green Reed Technology - Technology without boundaries</title><link>https://www.greenreedtech.com/categories/terraform/</link><description>Recent content in Terraform on Green Reed Technology - Technology without boundaries</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 17 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.greenreedtech.com/categories/terraform/index.xml" rel="self" type="application/rss+xml"/><item><title>HashiCorp Terraform Checksum Verification</title><link>https://www.greenreedtech.com/hashicorp-terraform-checksum-verification/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/hashicorp-terraform-checksum-verification/</guid><description>&lt;p>How do we verify that the Terraform binary we download is the same as the one HashiCorp produced?&lt;/p>
&lt;p>Ensuring the integrity of software is important to help prevent a malicious actor from tricking us into using a modified version of Terraform as well as ensuring the version we&amp;rsquo;re using isn&amp;rsquo;t corrupted. Checksums are used when there is a need to verify the integrity of software or data. The checksum process compares hashes of the software similar to how fingerprints are used for verification.&lt;/p></description></item><item><title>HashiCorp Terraform Code Signing</title><link>https://www.greenreedtech.com/hashicorp-terraform-code-signing/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/hashicorp-terraform-code-signing/</guid><description>&lt;p>Signing software has become critically important given the recent supply chain attacks. How do we verify that the software we&amp;rsquo;re downloading is actually created by who believe created the software? In this case we want to ensure that the Terraform binary we&amp;rsquo;re downloading was created by HashiCorp. This helps prevent a scenario where a malicious actor tricks you into downloading a compromised version of Terraform.&lt;/p></description></item><item><title>Terraform Puppet Provisioner</title><link>https://www.greenreedtech.com/terraform-puppet-provisioner/</link><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/terraform-puppet-provisioner/</guid><description>&lt;p>HashiCorp Terraform 0.12.2 added official support for a Puppet provisioner. One caveat is that the provisioner is only available in 0.12.x of Terraform. The provisioner provides a number of features such as adding data to the CSR for trusted facts, selecting between open source and enterprise agent versions along with autosigning the CSR.&lt;/p></description></item><item><title>Terraform AWS S3 State Management Least Privilege</title><link>https://www.greenreedtech.com/terraform-aws-s3-state-management-least-privilege/</link><pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/terraform-aws-s3-state-management-least-privilege/</guid><description>&lt;p>A very popular Terraform state management configuration is to utilize AWS S3 for state management and AWS DynamoDB for state locking. The problem is that there does not appear to be a publicly available document that details the minimum privileges required by an AWS user or role to leverage AWS S3 and DynamoDB for Terraform state management.&lt;/p></description></item><item><title>vSphere Immutable Infrastructure with Terraform</title><link>https://www.greenreedtech.com/vsphere-immutable-infrastructure-with-terraform/</link><pubDate>Fri, 13 Oct 2017 16:56:47 +0600</pubDate><guid>https://www.greenreedtech.com/vsphere-immutable-infrastructure-with-terraform/</guid><description>&lt;h2 id="what-is-immutable-infrastructure">What is immutable infrastructure?&lt;/h2>
&lt;p>Immutable infrastructure is the concept of utilizing an infrastructure component in an ephemeral manner. This means that the component can be destroyed and recreated at will without major impact.&lt;/p>
&lt;p>&lt;strong>Advantages&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Troublesome instances can easily be destroyed and recreated.&lt;/li>
&lt;li>System patching processes are replaced by just provisioning instances from a new template.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Terraform&lt;/strong>&lt;/p></description></item></channel></rss>