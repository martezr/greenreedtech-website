<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Green Reed Technology - Technology without boundaries</title><link>https://www.greenreedtech.com/tags/security/</link><description>Recent content in Security on Green Reed Technology - Technology without boundaries</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 13 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.greenreedtech.com/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Detecting HashiCorp Vault Policy Changes</title><link>https://www.greenreedtech.com/detecting-hashicorp-vault-policy-changes/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/detecting-hashicorp-vault-policy-changes/</guid><description>&lt;p>Security of a HashiCorp Vault deployment is of paramount importance given the sensitive nature of the information contained within the platform. Policies within the platform are used to grant and deny access to the sensitive information stored in the platform.&lt;/p>
&lt;p>All operations in HashiCorp Vault are audited and can be shipped to a centralized logging server. In this scenario we want to utilize the audit log to find out when a policy is changed outside of the CI/CD process used to define all of our policies using code.&lt;/p></description></item><item><title>HashiCorp Terraform Checksum Verification</title><link>https://www.greenreedtech.com/hashicorp-terraform-checksum-verification/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/hashicorp-terraform-checksum-verification/</guid><description>&lt;p>How do we verify that the Terraform binary we download is the same as the one HashiCorp produced?&lt;/p>
&lt;p>Ensuring the integrity of software is important to help prevent a malicious actor from tricking us into using a modified version of Terraform as well as ensuring the version we&amp;rsquo;re using isn&amp;rsquo;t corrupted. Checksums are used when there is a need to verify the integrity of software or data. The checksum process compares hashes of the software similar to how fingerprints are used for verification.&lt;/p></description></item><item><title>HashiCorp Terraform Code Signing</title><link>https://www.greenreedtech.com/hashicorp-terraform-code-signing/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/hashicorp-terraform-code-signing/</guid><description>&lt;p>Signing software has become critically important given the recent supply chain attacks. How do we verify that the software we&amp;rsquo;re downloading is actually created by who believe created the software? In this case we want to ensure that the Terraform binary we&amp;rsquo;re downloading was created by HashiCorp. This helps prevent a scenario where a malicious actor tricks you into downloading a compromised version of Terraform.&lt;/p></description></item><item><title>Enabling Cloud Workload Identity for vSphere Virtual Machines</title><link>https://www.greenreedtech.com/enabling-cloud-workload-identity-for-vsphere-virtual-machines/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/enabling-cloud-workload-identity-for-vsphere-virtual-machines/</guid><description>&lt;p>One of the major benefits of using the public cloud is the integrated identity and access management (IAM). This simplifies the process of granting workloads access to other cloud services. Think about how an AWS EC2 instance is granted access to write objects to an S3 bucket. An IAM role is assigned to the instance which has a policy that grants the S3 access. This enables AWS CLI tools and application built upon the AWS SDK to access the bucket without explicitly providing credentials.&lt;/p></description></item><item><title>HashiCorp Vault Unique AppRole Identity Logging</title><link>https://www.greenreedtech.com/hashicorp-vault-unique-approle-identity-logging/</link><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/hashicorp-vault-unique-approle-identity-logging/</guid><description>&lt;p>HashiCorp Vault supports several authentication methods for human and non-human access. Several of the non-human authentication methods are tied to specific platforms or clouds such as AWS, Kubernetes, Azure, and others. For workloads that are running on non-supported platforms, the AppRole authentication method is typically recommended for authentication. The AppRole method uses a role as the core construct as the name implies. In order to authenticate a role ID and a secret ID are required.&lt;/p></description></item><item><title>HashiCorp Vault vSphere Authentication with VMware Event Broker Appliance (VEBA)</title><link>https://www.greenreedtech.com/hashicorp-vault-vsphere-authentication-with-vmware-event-broker-appliance-veba/</link><pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/hashicorp-vault-vsphere-authentication-with-vmware-event-broker-appliance-veba/</guid><description>&lt;p>HashiCorp Vault supports a number of authentication methods including methods that utilize what HashiCorp refers to as a &amp;ldquo;trusted platform&amp;rdquo;. These include public clouds such as AWS, Azure and GCP along with platforms like Kubernetes. This method of authentication simplifies the introduction of the initial credential or secret that a workload must present to Vault by making use of information about itself that it already knows. The information that is provided to the instance or Kubernetes pod by the platform is metadata typically in the form of cryptographic data. This metadata is presented to HashiCorp Vault for authentication and verified by an API call to the underlying platform.&lt;/p></description></item><item><title>Identifying Active HashiCorp Vault Root Tokens</title><link>https://www.greenreedtech.com/identifying-active-hashicorp-vault-root-tokens/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/identifying-active-hashicorp-vault-root-tokens/</guid><description>&lt;p>Revoking the root token on a production HashiCorp Vault deployment is one of the recommended best practices for securing an instance of HashiCorp Vault. The actual process to revoke the root token is fairly straightforward by running the &lt;code>vault token revoke&lt;/code> command and providing the root token at the command line. In a previous blog post we looked at how to detect when a new root token has been generated. This might be necessary to perform certain operations that require root to carry out. One thing to be aware of is that multiple root tokens can be active at a single moment in time so there is no one root token but potentially many. With the potential for multiple root tokens we need a way to determine if there are any currently active root tokens on our Vault deployment.&lt;/p></description></item><item><title>Detecting HashiCorp Vault Root Token Generation</title><link>https://www.greenreedtech.com/detecting-hashicorp-vault-root-token-generation/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/detecting-hashicorp-vault-root-token-generation/</guid><description>&lt;p>HashiCorp Vault generates a default root token during installation and best practice dictates that the token should be revoked once the deployment has been setup. There are certain critical operations that can only be carried out by a root token and requires that a new root token be generated. Given the immense power that the root token garners it would be ideal to identify when a root token is generated. In this example we&amp;rsquo;ll utilize the Vault audit log to determine when the process to generate a new root token is started and when it is successfully completed. Splunk will be used as our centralized logging server in this example.&lt;/p></description></item><item><title>Detecting HashiCorp Vault Root Login</title><link>https://www.greenreedtech.com/detecting-hashicorp-vault-root-login/</link><pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/detecting-hashicorp-vault-root-login/</guid><description>&lt;p>Security of a HashiCorp Vault deployment is of paramount importance given the sensitive nature of the information contained within the platform. During the initial configuration process the root token is used to perform the setup and should be used to create less privileged named accounts. These accounts should be used for day to day administration of the Vault deployment and the root token should only be used in scenarios where it is absolutely necessary. The reason for this is the all-powerful privileges that the root token wields on the platform. Based upon this information it is critical to know whenever the root token is used to log into the Vault deployment and that&amp;rsquo;s what will be covered in this blog post.&lt;/p></description></item><item><title>Vault Hardening Compliance using Chef InSpec</title><link>https://www.greenreedtech.com/vault-hardening-compliance-using-chef-inspec/</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/vault-hardening-compliance-using-chef-inspec/</guid><description>&lt;p>HashiCorp Vault is quickly becoming the defacto secrets management platform used in environments that rely on DevOps concepts for application delivery. Vault is incredibly easy and simple to get started with but takes a bit of thought and planning to operationalize it.&lt;/p>
&lt;p>One of the challenges is ensuring that the installation of your security platform is secure. Chef InSpec is a compliance as code tool that allows us to create profiles that outline a desired security posture. In this post we&amp;rsquo;re looking at an example InSpec profile for Vault that mimics some of the common controls found in industry standards such as CIS benchmarks and DISA STIGs.&lt;/p></description></item><item><title>Vault Audit Logging</title><link>https://www.greenreedtech.com/vault-audit-logging/</link><pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/vault-audit-logging/</guid><description>&lt;p>Vault (&lt;a href="https://www.vaultproject.io/">https://www.vaultproject.io/&lt;/a>) is a secrets management tool created by HashiCorp that is extremely popular. Given the sensitive nature of the data being stored by a Vault server it is critical that auditing be configured appropriately to provide a record of who accessed sensitive data and when it was accessed. In this blog post we&amp;rsquo;ll walk through configuring a Vault server for auditing and dump the log entries to an AWS S3 bucket for centralized storage.&lt;/p></description></item><item><title>vRealize Automation 7.2 hardening compliance with vRO and Splunk</title><link>https://www.greenreedtech.com/vrealize-automation-7.2-hardening-compliance-with-vro-and-splunk/</link><pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate><guid>https://www.greenreedtech.com/vrealize-automation-7.2-hardening-compliance-with-vro-and-splunk/</guid><description>&lt;p>In this post we&amp;rsquo;ll walk through how we can utilize vRealize Orchestrator and Splunk to determine how compliant our vRA appliance is with the &lt;a href="https://pubs.vmware.com/vrealize-automation-72/topic/com.vmware.ICbase/PDF/vrealize-automation-72-hardening.pdf">vRealize Automation 7.2 hardening guide&lt;/a>.&lt;/p>
&lt;h4 id="vra-72-hardening-compliance-script">vRA 7.2 hardening compliance script&lt;/h4>
&lt;p>The first task is utilizing a script to check the settings specified in the hardening guide. In our case we&amp;rsquo;re going to generate JSON output from the script in order to easily ingest the data into Splunk. We&amp;rsquo;re utilizing bash to avoid any dependencies upon other packages that aren&amp;rsquo;t part of the default appliance install. The script below has been truncated for brevity and can be found in the github repo (&lt;a href="https://github.com/martezr/vra72-hardening-automation">https://github.com/martezr/vra72-hardening-automation&lt;/a>).&lt;/p></description></item></channel></rss>